// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Contract.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Contract.pbobjc.h"
 #import "Tron.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ContractRoot

@implementation ContractRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ContractRoot_FileDescriptor

static GPBFileDescriptor *ContractRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ResourceCode

GPBEnumDescriptor *ResourceCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Bandwidth\000Energy\000";
    static const int32_t values[] = {
        ResourceCode_Bandwidth,
        ResourceCode_Energy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResourceCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResourceCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResourceCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResourceCode_Bandwidth:
    case ResourceCode_Energy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AccountCreateContract

@implementation AccountCreateContract

@dynamic ownerAddress;
@dynamic accountAddress;
@dynamic type;

typedef struct AccountCreateContract__storage_ {
  uint32_t _has_storage_[1];
  AccountType type;
  NSData *ownerAddress;
  NSData *accountAddress;
} AccountCreateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = AccountCreateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccountCreateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "accountAddress",
        .dataTypeSpecific.className = NULL,
        .number = AccountCreateContract_FieldNumber_AccountAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AccountCreateContract__storage_, accountAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = AccountType_EnumDescriptor,
        .number = AccountCreateContract_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AccountCreateContract__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccountCreateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccountCreateContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AccountCreateContract_Type_RawValue(AccountCreateContract *message) {
  GPBDescriptor *descriptor = [AccountCreateContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AccountCreateContract_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAccountCreateContract_Type_RawValue(AccountCreateContract *message, int32_t value) {
  GPBDescriptor *descriptor = [AccountCreateContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AccountCreateContract_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AccountUpdateContract

@implementation AccountUpdateContract

@dynamic accountName;
@dynamic ownerAddress;

typedef struct AccountUpdateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *accountName;
  NSData *ownerAddress;
} AccountUpdateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountName",
        .dataTypeSpecific.className = NULL,
        .number = AccountUpdateContract_FieldNumber_AccountName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccountUpdateContract__storage_, accountName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = AccountUpdateContract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AccountUpdateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccountUpdateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccountUpdateContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAccountIdContract

@implementation SetAccountIdContract

@dynamic accountId;
@dynamic ownerAddress;

typedef struct SetAccountIdContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *accountId;
  NSData *ownerAddress;
} SetAccountIdContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = SetAccountIdContract_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAccountIdContract__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = SetAccountIdContract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetAccountIdContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAccountIdContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAccountIdContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferContract

@implementation TransferContract

@dynamic ownerAddress;
@dynamic toAddress;
@dynamic amount;

typedef struct TransferContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *toAddress;
  int64_t amount;
} TransferContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_ToAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferAssetContract

@implementation TransferAssetContract

@dynamic assetName;
@dynamic ownerAddress;
@dynamic toAddress;
@dynamic amount;

typedef struct TransferAssetContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *assetName;
  NSData *ownerAddress;
  NSData *toAddress;
  int64_t amount;
} TransferAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_AssetName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_ToAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferAssetContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoteAssetContract

@implementation VoteAssetContract

@dynamic ownerAddress;
@dynamic voteAddressArray, voteAddressArray_Count;
@dynamic support;
@dynamic count;

typedef struct VoteAssetContract__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSData *ownerAddress;
  NSMutableArray *voteAddressArray;
} VoteAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoteAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "voteAddressArray",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_VoteAddressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoteAssetContract__storage_, voteAddressArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "support",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_Support,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoteAssetContract__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoteAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoteAssetContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoteWitnessContract

@implementation VoteWitnessContract

@dynamic ownerAddress;
@dynamic votesArray, votesArray_Count;
@dynamic support;

typedef struct VoteWitnessContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSMutableArray *votesArray;
} VoteWitnessContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoteWitnessContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "votesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoteWitnessContract_Vote),
        .number = VoteWitnessContract_FieldNumber_VotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoteWitnessContract__storage_, votesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "support",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_FieldNumber_Support,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoteWitnessContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoteWitnessContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoteWitnessContract_Vote

@implementation VoteWitnessContract_Vote

@dynamic voteAddress;
@dynamic voteCount;

typedef struct VoteWitnessContract_Vote__storage_ {
  uint32_t _has_storage_[1];
  NSData *voteAddress;
  int64_t voteCount;
} VoteWitnessContract_Vote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteAddress",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_Vote_FieldNumber_VoteAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoteWitnessContract_Vote__storage_, voteAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "voteCount",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_Vote_FieldNumber_VoteCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoteWitnessContract_Vote__storage_, voteCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoteWitnessContract_Vote class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoteWitnessContract_Vote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(VoteWitnessContract)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateSettingContract

@implementation UpdateSettingContract

@dynamic ownerAddress;
@dynamic contractAddress;
@dynamic consumeUserResourcePercent;

typedef struct UpdateSettingContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
  int64_t consumeUserResourcePercent;
} UpdateSettingContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UpdateSettingContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateSettingContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.className = NULL,
        .number = UpdateSettingContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateSettingContract__storage_, contractAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "consumeUserResourcePercent",
        .dataTypeSpecific.className = NULL,
        .number = UpdateSettingContract_FieldNumber_ConsumeUserResourcePercent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateSettingContract__storage_, consumeUserResourcePercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateSettingContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateSettingContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateEnergyLimitContract

@implementation UpdateEnergyLimitContract

@dynamic ownerAddress;
@dynamic contractAddress;
@dynamic originEnergyLimit;

typedef struct UpdateEnergyLimitContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
  int64_t originEnergyLimit;
} UpdateEnergyLimitContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UpdateEnergyLimitContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateEnergyLimitContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.className = NULL,
        .number = UpdateEnergyLimitContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateEnergyLimitContract__storage_, contractAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "originEnergyLimit",
        .dataTypeSpecific.className = NULL,
        .number = UpdateEnergyLimitContract_FieldNumber_OriginEnergyLimit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateEnergyLimitContract__storage_, originEnergyLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateEnergyLimitContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateEnergyLimitContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WitnessCreateContract

@implementation WitnessCreateContract

@dynamic ownerAddress;
@dynamic URL;

typedef struct WitnessCreateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *URL;
} WitnessCreateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WitnessCreateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WitnessCreateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = WitnessCreateContract_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WitnessCreateContract__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WitnessCreateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WitnessCreateContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WitnessUpdateContract

@implementation WitnessUpdateContract

@dynamic ownerAddress;
@dynamic updateURL;

typedef struct WitnessUpdateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *updateURL;
} WitnessUpdateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WitnessUpdateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WitnessUpdateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "updateURL",
        .dataTypeSpecific.className = NULL,
        .number = WitnessUpdateContract_FieldNumber_UpdateURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WitnessUpdateContract__storage_, updateURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WitnessUpdateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WitnessUpdateContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\014\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AssetIssueContract

@implementation AssetIssueContract

@dynamic id_p;
@dynamic ownerAddress;
@dynamic name;
@dynamic abbr;
@dynamic totalSupply;
@dynamic frozenSupplyArray, frozenSupplyArray_Count;
@dynamic trxNum;
@dynamic precision;
@dynamic num;
@dynamic startTime;
@dynamic endTime;
@dynamic order;
@dynamic voteScore;
@dynamic description_p;
@dynamic URL;
@dynamic freeAssetNetLimit;
@dynamic publicFreeAssetNetLimit;
@dynamic publicFreeAssetNetUsage;
@dynamic publicLatestFreeNetTime;

typedef struct AssetIssueContract__storage_ {
  uint32_t _has_storage_[1];
  int32_t trxNum;
  int32_t precision;
  int32_t num;
  int32_t voteScore;
  NSData *ownerAddress;
  NSData *name;
  NSData *abbr;
  NSMutableArray *frozenSupplyArray;
  NSData *description_p;
  NSData *URL;
  NSString *id_p;
  int64_t totalSupply;
  int64_t startTime;
  int64_t endTime;
  int64_t order;
  int64_t freeAssetNetLimit;
  int64_t publicFreeAssetNetLimit;
  int64_t publicFreeAssetNetUsage;
  int64_t publicLatestFreeNetTime;
} AssetIssueContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "abbr",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Abbr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, abbr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "totalSupply",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_TotalSupply,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, totalSupply),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenSupplyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AssetIssueContract_FrozenSupply),
        .number = AssetIssueContract_FieldNumber_FrozenSupplyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, frozenSupplyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trxNum",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_TrxNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, trxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Precision,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, precision),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Num,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_StartTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_EndTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Order,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voteScore",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_VoteScore,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, voteScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Description_p,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_URL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "freeAssetNetLimit",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_FreeAssetNetLimit,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, freeAssetNetLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publicFreeAssetNetLimit",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_PublicFreeAssetNetLimit,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, publicFreeAssetNetLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publicFreeAssetNetUsage",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_PublicFreeAssetNetUsage,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, publicFreeAssetNetUsage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publicLatestFreeNetTime",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_PublicLatestFreeNetTime,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, publicLatestFreeNetTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssetIssueContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssetIssueContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\025!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AssetIssueContract_FrozenSupply

@implementation AssetIssueContract_FrozenSupply

@dynamic frozenAmount;
@dynamic frozenDays;

typedef struct AssetIssueContract_FrozenSupply__storage_ {
  uint32_t _has_storage_[1];
  int64_t frozenAmount;
  int64_t frozenDays;
} AssetIssueContract_FrozenSupply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "frozenAmount",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FrozenSupply_FieldNumber_FrozenAmount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssetIssueContract_FrozenSupply__storage_, frozenAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenDays",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FrozenSupply_FieldNumber_FrozenDays,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssetIssueContract_FrozenSupply__storage_, frozenDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssetIssueContract_FrozenSupply class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssetIssueContract_FrozenSupply__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AssetIssueContract)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ParticipateAssetIssueContract

@implementation ParticipateAssetIssueContract

@dynamic ownerAddress;
@dynamic toAddress;
@dynamic assetName;
@dynamic amount;

typedef struct ParticipateAssetIssueContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *toAddress;
  NSData *assetName;
  int64_t amount;
} ParticipateAssetIssueContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_ToAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_AssetName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ParticipateAssetIssueContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ParticipateAssetIssueContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FreezeBalanceContract

@implementation FreezeBalanceContract

@dynamic ownerAddress;
@dynamic frozenBalance;
@dynamic frozenDuration;
@dynamic resource;
@dynamic receiverAddress;

typedef struct FreezeBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  ResourceCode resource;
  NSData *ownerAddress;
  NSData *receiverAddress;
  int64_t frozenBalance;
  int64_t frozenDuration;
} FreezeBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "frozenBalance",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_FrozenBalance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, frozenBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenDuration",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_FrozenDuration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, frozenDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resource",
        .dataTypeSpecific.enumDescFunc = ResourceCode_EnumDescriptor,
        .number = FreezeBalanceContract_FieldNumber_Resource,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, resource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiverAddress",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_ReceiverAddress,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, receiverAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FreezeBalanceContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FreezeBalanceContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FreezeBalanceContract_Resource_RawValue(FreezeBalanceContract *message) {
  GPBDescriptor *descriptor = [FreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FreezeBalanceContract_FieldNumber_Resource];
  return GPBGetMessageInt32Field(message, field);
}

void SetFreezeBalanceContract_Resource_RawValue(FreezeBalanceContract *message, int32_t value) {
  GPBDescriptor *descriptor = [FreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FreezeBalanceContract_FieldNumber_Resource];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UnfreezeBalanceContract

@implementation UnfreezeBalanceContract

@dynamic ownerAddress;
@dynamic resource;
@dynamic receiverAddress;

typedef struct UnfreezeBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  ResourceCode resource;
  NSData *ownerAddress;
  NSData *receiverAddress;
} UnfreezeBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "resource",
        .dataTypeSpecific.enumDescFunc = ResourceCode_EnumDescriptor,
        .number = UnfreezeBalanceContract_FieldNumber_Resource,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, resource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiverAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeBalanceContract_FieldNumber_ReceiverAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, receiverAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnfreezeBalanceContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnfreezeBalanceContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UnfreezeBalanceContract_Resource_RawValue(UnfreezeBalanceContract *message) {
  GPBDescriptor *descriptor = [UnfreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UnfreezeBalanceContract_FieldNumber_Resource];
  return GPBGetMessageInt32Field(message, field);
}

void SetUnfreezeBalanceContract_Resource_RawValue(UnfreezeBalanceContract *message, int32_t value) {
  GPBDescriptor *descriptor = [UnfreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UnfreezeBalanceContract_FieldNumber_Resource];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UnfreezeAssetContract

@implementation UnfreezeAssetContract

@dynamic ownerAddress;

typedef struct UnfreezeAssetContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
} UnfreezeAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnfreezeAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnfreezeAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnfreezeAssetContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WithdrawBalanceContract

@implementation WithdrawBalanceContract

@dynamic ownerAddress;

typedef struct WithdrawBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
} WithdrawBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WithdrawBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WithdrawBalanceContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WithdrawBalanceContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateAssetContract

@implementation UpdateAssetContract

@dynamic ownerAddress;
@dynamic description_p;
@dynamic URL;
@dynamic newLimit;
@dynamic newPublicLimit;

typedef struct UpdateAssetContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *description_p;
  NSData *URL;
  int64_t newLimit;
  int64_t newPublicLimit;
} UpdateAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "newLimit",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_NewLimit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, newLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newPublicLimit",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_NewPublicLimit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, newPublicLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateAssetContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProposalCreateContract

@implementation ProposalCreateContract

@dynamic ownerAddress;
@dynamic parameters, parameters_Count;

typedef struct ProposalCreateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  GPBInt64Int64Dictionary *parameters;
} ProposalCreateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ProposalCreateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProposalCreateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "parameters",
        .dataTypeSpecific.className = NULL,
        .number = ProposalCreateContract_FieldNumber_Parameters,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProposalCreateContract__storage_, parameters),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProposalCreateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProposalCreateContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProposalApproveContract

@implementation ProposalApproveContract

@dynamic ownerAddress;
@dynamic proposalId;
@dynamic isAddApproval;

typedef struct ProposalApproveContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  int64_t proposalId;
} ProposalApproveContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ProposalApproveContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProposalApproveContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proposalId",
        .dataTypeSpecific.className = NULL,
        .number = ProposalApproveContract_FieldNumber_ProposalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProposalApproveContract__storage_, proposalId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isAddApproval",
        .dataTypeSpecific.className = NULL,
        .number = ProposalApproveContract_FieldNumber_IsAddApproval,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProposalApproveContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProposalApproveContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProposalDeleteContract

@implementation ProposalDeleteContract

@dynamic ownerAddress;
@dynamic proposalId;

typedef struct ProposalDeleteContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  int64_t proposalId;
} ProposalDeleteContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ProposalDeleteContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProposalDeleteContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proposalId",
        .dataTypeSpecific.className = NULL,
        .number = ProposalDeleteContract_FieldNumber_ProposalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProposalDeleteContract__storage_, proposalId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProposalDeleteContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProposalDeleteContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateSmartContract

@implementation CreateSmartContract

@dynamic ownerAddress;
@dynamic hasNewContract, newContract;
@dynamic callTokenValue;
@dynamic tokenId;

typedef struct CreateSmartContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  SmartContract *newContract;
  int64_t callTokenValue;
  int64_t tokenId;
} CreateSmartContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = CreateSmartContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "newContract",
        .dataTypeSpecific.className = GPBStringifySymbol(SmartContract),
        .number = CreateSmartContract_FieldNumber_NewContract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, newContract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callTokenValue",
        .dataTypeSpecific.className = NULL,
        .number = CreateSmartContract_FieldNumber_CallTokenValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, callTokenValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = CreateSmartContract_FieldNumber_TokenId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateSmartContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateSmartContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TriggerSmartContract

@implementation TriggerSmartContract

@dynamic ownerAddress;
@dynamic contractAddress;
@dynamic callValue;
@dynamic data_p;
@dynamic callTokenValue;
@dynamic tokenId;

typedef struct TriggerSmartContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
  NSData *data_p;
  int64_t callValue;
  int64_t callTokenValue;
  int64_t tokenId;
} TriggerSmartContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TriggerSmartContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.className = NULL,
        .number = TriggerSmartContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, contractAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "callValue",
        .dataTypeSpecific.className = NULL,
        .number = TriggerSmartContract_FieldNumber_CallValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, callValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = TriggerSmartContract_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "callTokenValue",
        .dataTypeSpecific.className = NULL,
        .number = TriggerSmartContract_FieldNumber_CallTokenValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, callTokenValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = TriggerSmartContract_FieldNumber_TokenId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TriggerSmartContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TriggerSmartContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuyStorageContract

@implementation BuyStorageContract

@dynamic ownerAddress;
@dynamic quant;

typedef struct BuyStorageContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  int64_t quant;
} BuyStorageContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = BuyStorageContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyStorageContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "quant",
        .dataTypeSpecific.className = NULL,
        .number = BuyStorageContract_FieldNumber_Quant,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuyStorageContract__storage_, quant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyStorageContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyStorageContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuyStorageBytesContract

@implementation BuyStorageBytesContract

@dynamic ownerAddress;
@dynamic bytes;

typedef struct BuyStorageBytesContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  int64_t bytes;
} BuyStorageBytesContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = BuyStorageBytesContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyStorageBytesContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "bytes",
        .dataTypeSpecific.className = NULL,
        .number = BuyStorageBytesContract_FieldNumber_Bytes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuyStorageBytesContract__storage_, bytes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyStorageBytesContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyStorageBytesContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SellStorageContract

@implementation SellStorageContract

@dynamic ownerAddress;
@dynamic storageBytes;

typedef struct SellStorageContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  int64_t storageBytes;
} SellStorageContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = SellStorageContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SellStorageContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "storageBytes",
        .dataTypeSpecific.className = NULL,
        .number = SellStorageContract_FieldNumber_StorageBytes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SellStorageContract__storage_, storageBytes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SellStorageContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SellStorageContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExchangeCreateContract

@implementation ExchangeCreateContract

@dynamic ownerAddress;
@dynamic firstTokenId;
@dynamic firstTokenBalance;
@dynamic secondTokenId;
@dynamic secondTokenBalance;

typedef struct ExchangeCreateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *firstTokenId;
  NSData *secondTokenId;
  int64_t firstTokenBalance;
  int64_t secondTokenBalance;
} ExchangeCreateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeCreateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExchangeCreateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "firstTokenId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeCreateContract_FieldNumber_FirstTokenId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExchangeCreateContract__storage_, firstTokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "firstTokenBalance",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeCreateContract_FieldNumber_FirstTokenBalance,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExchangeCreateContract__storage_, firstTokenBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "secondTokenId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeCreateContract_FieldNumber_SecondTokenId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExchangeCreateContract__storage_, secondTokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "secondTokenBalance",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeCreateContract_FieldNumber_SecondTokenBalance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ExchangeCreateContract__storage_, secondTokenBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExchangeCreateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExchangeCreateContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExchangeInjectContract

@implementation ExchangeInjectContract

@dynamic ownerAddress;
@dynamic exchangeId;
@dynamic tokenId;
@dynamic quant;

typedef struct ExchangeInjectContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *tokenId;
  int64_t exchangeId;
  int64_t quant;
} ExchangeInjectContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeInjectContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExchangeInjectContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeInjectContract_FieldNumber_ExchangeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExchangeInjectContract__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeInjectContract_FieldNumber_TokenId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExchangeInjectContract__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "quant",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeInjectContract_FieldNumber_Quant,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExchangeInjectContract__storage_, quant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExchangeInjectContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExchangeInjectContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExchangeWithdrawContract

@implementation ExchangeWithdrawContract

@dynamic ownerAddress;
@dynamic exchangeId;
@dynamic tokenId;
@dynamic quant;

typedef struct ExchangeWithdrawContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *tokenId;
  int64_t exchangeId;
  int64_t quant;
} ExchangeWithdrawContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeWithdrawContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExchangeWithdrawContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeWithdrawContract_FieldNumber_ExchangeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExchangeWithdrawContract__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeWithdrawContract_FieldNumber_TokenId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExchangeWithdrawContract__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "quant",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeWithdrawContract_FieldNumber_Quant,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExchangeWithdrawContract__storage_, quant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExchangeWithdrawContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExchangeWithdrawContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExchangeTransactionContract

@implementation ExchangeTransactionContract

@dynamic ownerAddress;
@dynamic exchangeId;
@dynamic tokenId;
@dynamic quant;
@dynamic expected;

typedef struct ExchangeTransactionContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *tokenId;
  int64_t exchangeId;
  int64_t quant;
  int64_t expected;
} ExchangeTransactionContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeTransactionContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExchangeTransactionContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeTransactionContract_FieldNumber_ExchangeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExchangeTransactionContract__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeTransactionContract_FieldNumber_TokenId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExchangeTransactionContract__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "quant",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeTransactionContract_FieldNumber_Quant,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExchangeTransactionContract__storage_, quant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expected",
        .dataTypeSpecific.className = NULL,
        .number = ExchangeTransactionContract_FieldNumber_Expected,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ExchangeTransactionContract__storage_, expected),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExchangeTransactionContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExchangeTransactionContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
